<?xml version="1.0" encoding="utf-8"?>

<!--
/*
* The contents of this file are subject to the Common Public Attribution License

* Version 1.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://cpal.abiquo.com.



* The License is based on the Mozilla Public License Version 1.1 but Sections 14
* and 15 have been added to cover use of software over a computer network and
* provide for limited attribution for the Original Developer. In addition,



* Exhibit A has been modified to be consistent with Exhibit B.
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License



* for the specific language governing rights and limitations under the License.
*
* The Original Code is abiquo,  14 Jul 2008. The Original Developer is the
* Initial Developer. The Initial Developer of the Original Code is Soluciones Grid,



* S.L.. All portions of the code are Copyright Â© Soluciones Grid, S.L.
* All Rights Reserved.
*/

-->
<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	
	
	<mx:Script>
		<![CDATA[
			import net.undf.abicloud.model.AbiCloudModel;
			import net.undf.abicloud.controller.ResultHandler;
			import net.undf.abicloud.controller.FaultHandler;
			import net.undf.abicloud.business.Services;
			import com.asfusion.mate.utils.debug.Debugger;
			
			import net.undf.abicloud.events.*;
			import net.undf.abicloud.utils.ScreenBlocker;
			
			[Bindable]
			private var services:Services = new Services();
			
		]]>
	</mx:Script>
	
	<!-- ********************************************************************************************************************* -->
	<!-- VirtualImageEvent.EDIT_REPOSITORY ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.EDIT_REPOSITORY}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="editRepository"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session, event.repository]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleEditRepository"
							   arguments="{[resultObject, event.oldRepository, event.repository]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>

	
	<!-- ********************************************************************************************************************* -->
	<!-- VirtualImageEvent.GET_VIRTUALIMAGES_INFORMATION ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.GET_VIRTUALIMAGES_INFORMATION}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="getVirtualImagesInformation"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleGetVirtualImagesInformation"
							   arguments="{[resultObject]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
	
	

	<!-- ********************************************************************************************************************* -->
	<!-- VirtualImageEvent.GET_VIRTUALIMAGES_BY_USER ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.GET_VIRTUALIMAGES_BY_USER}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="getVirtualImagesByUser"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleGetVirtualImagesByUser"
							   arguments="{[resultObject]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
	
	
	<!-- VirtualImageEvent.CREATE_VIRTUAL_IMAGE ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.CREATE_VIRTUAL_IMAGE}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="createVirtualImage"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session, event.virtualImage]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleCreateVirtualImage"
							   arguments="{[resultObject]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
	
	
	<!-- VirtualImageEvent.EDIT_VIRTUALIMAGE ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.EDIT_VIRTUALIMAGE}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="editVirtualImage"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session, event.virtualImage]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleEditVirtualImage"
							   arguments="{[resultObject, event.oldVirtualImage, event.virtualImage]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
	
	
	<!-- VirtualImageEvent.DELETE_VIRTUALIMAGE ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.DELETE_VIRTUALIMAGE}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="deleteVirtualImage"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session, event.virtualImage]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleDeleteVirtualImage"
							   arguments="{[resultObject, event.virtualImage]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
	
	<!-- ********************************************************************************************************************* -->
	<!-- VirtualImageEvent.CREATE_CATEGORY ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.CREATE_CATEGORY}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="createCategory"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session, event.category]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleCreateCategory"
							   arguments="{[resultObject]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
	
	<!-- VirtualImageEvent.DELETE_CATEGORY ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.DELETE_CATEGORY}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="deleteCategory"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session, event.category]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleDeleteCategory"
							   arguments="{[resultObject, event.category]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
	
	
	<!-- ********************************************************************************************************************* -->
	<!-- VirtualImageEvent.CREATE_ICON ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.CREATE_ICON}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="createIcon"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session, event.icon]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleCreateIcon"
							   arguments="{[resultObject]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
	
	<!-- VirtualImageEvent.DELETE_ICON ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.DELETE_ICON}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="deleteIcon"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session, event.icon]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleDeleteIcon"
							   arguments="{[resultObject, event.icon]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
	
	<!-- VirtualImageEvent.EDIT_ICON ________________________________________________________________________ -->
	<EventHandlers type="{VirtualImageEvent.EDIT_ICON}">
	
		<!-- Blocking screen -->
		<InlineInvoker method="ScreenBlocker.blockScreen" />
		
		<!-- Make call to the server here -->

		<RemoteObjectInvoker instance="{services.virtualImageService}"
						     method="editIcon"
						     arguments="{[AbiCloudModel.getInstance().loginManager.session, event.icon]}">
						     
			<resultHandlers>
				<MethodInvoker generator="{VirtualImageResultHandler}"
							   method="handleEditIcon"
							   arguments="{[resultObject, event.oldIcon, event.icon]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</resultHandlers>
			
			<faultHandlers>
				<MethodInvoker generator="{FaultHandler}"
							   method="handleFault"
							   arguments="{[fault]}"/>
							   
				<!-- Unblock screen -->
				<InlineInvoker method="ScreenBlocker.unblockScreen" />
			</faultHandlers>
			
		</RemoteObjectInvoker>
		
	</EventHandlers>
</EventMap>