<?xml version="1.0" encoding="utf-8"?>

<!--
/*
* The contents of this file are subject to the Common Public Attribution License

* Version 1.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://cpal.abiquo.com.



* The License is based on the Mozilla Public License Version 1.1 but Sections 14
* and 15 have been added to cover use of software over a computer network and
* provide for limited attribution for the Original Developer. In addition,



* Exhibit A has been modified to be consistent with Exhibit B.
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License



* for the specific language governing rights and limitations under the License.
*
* The Original Code is abiquo,  14 Jul 2008. The Original Developer is the
* Initial Developer. The Initial Developer of the Original Code is Soluciones Grid,



* S.L.. All portions of the code are Copyright Â© Soluciones Grid, S.L.
* All Rights Reserved.
*/

-->
<AbiCloudPopUp xmlns="net.undf.abicloud.view.common.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
		   	   titleText="@Resource(bundle='User', key='POPUP_TITLE_USEREDIT')">
	
	<mx:Metadata>
		[Event(name="userEditClose", type="flash.events.Event")]		
	</mx:Metadata>
	
	
	<mx:Script>
		<![CDATA[
			import net.undf.abicloud.vo.user.Enterprise;
			import mx.resources.ResourceBundle;
			import mx.resources.ResourceManager;
			import mx.utils.ObjectUtil;
			import net.undf.abicloud.business.managers.UserManager;
			import mx.collections.ArrayCollection;
			import net.undf.abicloud.events.UserEvent;
			import net.undf.abicloud.vo.user.Role;
			import net.undf.abicloud.vo.user.User;
			import net.undf.abicloud.model.AbiCloudModel;
		
			//Flag to indicate when this component is listening for new user creation
			private var _listenerRegistered:Boolean;
			
			//The user to edit
			private var _userToEdit:User;
			
			[ResourceBundle("User")]
			private var rb:ResourceBundle;
			
			/**
			 * Initializes this form to create a new user
			 **/
			public function init(user:User):void
			{
				this._userToEdit = user;
				
				enterpriseInput.text = this._userToEdit.enterprise.name;
				nameInput.text = this._userToEdit.name;
				surnameInput.text = this._userToEdit.surname;
				roleInput.selectedIndex = -1;
				roleInput.prompt = this._userToEdit.role.shortDescription;
				userInput.text = this._userToEdit.user;
				passwordInput.text = this._userToEdit.pass;
				passwordRepeatInput.text = this._userToEdit.pass;
				emailInput.text = this._userToEdit.email;
				descriptionInput.text = this._userToEdit.description;
				activeInput.selected = this._userToEdit.active;
				
				_listenerRegistered = false;
				labelPasswordInvalid.visible = false;
				acceptButton.enabled = true;
				
				nameInput.setFocus();
			}
			
			/**
			 * To save the new user
			 **/
			private function onAccept():void
			{	
				//We do not change the original user until changes are saved in server
				var userCopy:User = ObjectUtil.copy(this._userToEdit) as User;
				
				userCopy.name = nameInput.text;
				userCopy.surname = surnameInput.text;
				
				if(roleInput.selectedIndex > -1)
					userCopy.role = roleInput.selectedItem as Role;
					
				userCopy.user = userInput.text;
				userCopy.pass = passwordInput.text;
				userCopy.email = emailInput.text;
				userCopy.description = descriptionInput.text;
				userCopy.active = activeInput.selected;
				
				//Registering listener, if it is not, to know when the user has been created
				if(!this._listenerRegistered)
				{
					AbiCloudModel.getInstance().userManager.addEventListener(UserEvent.USERS_EDITED, onUserEdited);
					this._listenerRegistered = true;
				}
				
				//Announcing that user wants to edit a user
				var userEvent:UserEvent = new UserEvent(UserEvent.EDIT_USERS);
				var users:ArrayCollection = new ArrayCollection();
				users.addItem(userCopy);
				var oldUsers:ArrayCollection = new ArrayCollection();
				oldUsers.addItem(this._userToEdit);
				
				userEvent.users = users;
				userEvent.oldUsers = oldUsers;
				
				dispatchEvent(userEvent);
				
				//Closing the form
				onCancel();
			}
			
			
			/**
			 * Cancels the User Creation
			 **/
			private function onCancel():void
			{
				//Unregistering listener, if registered
				if(this._listenerRegistered)
					AbiCloudModel.getInstance().userManager.removeEventListener(UserEvent.USERS_EDITED, onUserEdited);
					
				dispatchEvent(new Event("userEditClose"));
			}
			
			/**
			 * Handler for success in new user creation
			 **/
			private function onUserEdited(event:Event):void
			{	
				//Now that user has been successfully created, we can close this Pop Up
				onCancel();	
			}
			
			 /**
			 * Activates the Accept Button if the form is valid
			 **/			 
			 private function validateForm():void
			 {
			 	if(nameInput.text.length > 0 	 && surnameInput.text.length > 0  &&
			 	   passwordInput.text.length > 0 && emailInput.text.length > 0)
			 	 {
			 	 	if(passwordInput.text == passwordRepeatInput.text)
			 	 	{
			 	 		labelPasswordInvalid.visible = false;
			 	 		acceptButton.enabled = true;
			 	 	}
			 	 	else
			 	 	{
			 	 		labelPasswordInvalid.visible = true;
			 	 		acceptButton.enabled = false;
			 	 	}
			 	 		
			 	 }
			 	    
			 	else
			 		acceptButton.enabled = false;
			 }		 
			
			[Bindable]
			private var _roleEditable:Boolean = true;
			public function set roleEditable(value:Boolean):void
			{
				this._roleEditable = value;
			}
			
			[Bindable]
			private var _activeEditable:Boolean = true;
			public function set activeEditable(value:Boolean):void
			{
				this._activeEditable = value;
			}
			
			/**
			 * Basic behaivour is as follows:
			 * If user presses the Enter, in any part of this Pop Up (except buttons), it would be
			 * like Accept Button has been pressed
			 */
			override protected function keyboardHandler(keyboardEvent:KeyboardEvent):void
			{
				if(keyboardEvent.target == acceptButton || keyboardEvent.target == cancelButton)
					super.keyboardHandler(keyboardEvent);
				else
				{
					if(keyboardEvent.keyCode == 13 && acceptButton.enabled)
						onAccept();
				}
			}
		]]>
	</mx:Script>
	
	<mx:Form paddingTop="3">
	
		<mx:FormItem label="@Resource(bundle='User', key='LABEL_ENTERPRISE')">
			<mx:TextInput id="enterpriseInput" height="20"
					      editable="false" />
		</mx:FormItem>
		
		<mx:FormItem label="@Resource(bundle='Common', key='TEXTINPUT_LABEL_NAME')" required="true">
			<mx:TextInput id="nameInput" maxChars="29" height="20"
					      change="validateForm()" />
		</mx:FormItem>
		
		<mx:FormItem label="@Resource(bundle='User', key='TEXTINPUT_LABEL_SURNAME')" required="true">
			<mx:TextInput id="surnameInput" maxChars="49" height="20"
						  change="validateForm()"/>
		</mx:FormItem>
		
		<mx:FormItem label="@Resource(bundle='User', key='LABEL_ROLE')" required="true">
			<mx:ComboBox id="roleInput" height="18"
						 dataProvider="{AbiCloudModel.getInstance().userManager.roles}"
						 labelField="shortDescription" enabled="{this._roleEditable}"/>
		</mx:FormItem>
		
		
		<mx:FormItem label="@Resource(bundle='User', key='TEXTINPUT_LABEL_USER')" required="true" direction="horizontal">
			<mx:TextInput id="userInput" maxChars="19" height="20"
						  change="validateForm()"
						  editable="false"/>
		</mx:FormItem>
		
		<mx:FormItem label="@Resource(bundle='User', key='TEXTINPUT_LABEL_PASSWORD')" required="true">
			<mx:TextInput id="passwordInput" maxChars="14" displayAsPassword="true" height="20"
						  change="validateForm()" />
		</mx:FormItem>
		
		<mx:FormItem label="@Resource(bundle='User', key='TEXTINPUT_LABEL_PASSWORDREPEAT')" required="true" direction="horizontal">
			<mx:TextInput id="passwordRepeatInput" maxChars="14" displayAsPassword="true" height="20"
						  change="validateForm()" />
						  
			<mx:Label id="labelPasswordInvalid"
					  text="@Resource(bundle='User', key='LABEL_PASSWORDINVALID')"
					  color="#FF0000" fontWeight="bold"/>
		</mx:FormItem>
		
		<mx:FormItem label="@Resource(bundle='User', key='TEXTINPUT_LABEL_EMAIL')" required="true">
			<mx:TextInput id="emailInput" maxChars="29" height="20"
						  change="validateForm()"/>
		</mx:FormItem>
		
		<mx:FormItem label="@Resource(bundle='User', key='TEXTINPUT_LABEL_DESCRIPTION')">
			<mx:TextArea id="descriptionInput" maxChars="99"/>
		</mx:FormItem>
		
		<mx:FormItem label="@Resource(bundle='User', key='CHECKBOX_LABEL_ACTIVE')">
			<mx:CheckBox id="activeInput" enabled="{this._activeEditable}"/>
		</mx:FormItem>
		
		<!-- BUTTONS -->
		<mx:FormItem direction="horizontal">
			<mx:Button id="acceptButton" label="@Resource(bundle='Common', key='BUTTON_ACCEPT')" 
					   click="onAccept()" height="18"/>
			
			<mx:Button id="cancelButton" label="@Resource(bundle='Common', key='BUTTON_CANCEL')"
					   click="onCancel()"  height="18" styleName="buttonGris"/>
		</mx:FormItem>
	</mx:Form>
</AbiCloudPopUp>
