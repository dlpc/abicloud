<?xml version="1.0" encoding="utf-8"?>

<!--
/*
* The contents of this file are subject to the Common Public Attribution License

* Version 1.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://cpal.abiquo.com.



* The License is based on the Mozilla Public License Version 1.1 but Sections 14
* and 15 have been added to cover use of software over a computer network and
* provide for limited attribution for the Original Developer. In addition,



* Exhibit A has been modified to be consistent with Exhibit B.
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License



* for the specific language governing rights and limitations under the License.
*
* The Original Code is abiquo,  14 Jul 2008. The Original Developer is the
* Initial Developer. The Initial Developer of the Original Code is Soluciones Grid,



* S.L.. All portions of the code are Copyright Â© Soluciones Grid, S.L.
* All Rights Reserved.
*/

-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:utils="net.undf.abicloud.utils.*"
		   implements="net.undf.abicloud.security.ISecurableComponent"
		   width="276" height="143" verticalScrollPolicy="off" horizontalScrollPolicy="off"
		   useHandCursor="true" buttonMode="true" mouseChildren="false"
		   click="onClickEnterButton()"
		   rollOver="doZoom(event)" rollOut="doZoom(event)"
		   creationComplete="onCreationComplete()">
	
	<mx:Zoom id="zoomAll" duration="150" zoomWidthTo="1.2" zoomHeightTo="1.2" zoomWidthFrom=".8" zoomHeightFrom=".8"/>
	
	<mx:Metadata>
		[Event(name="DashboardShortcurtClicked", type="mx.events.ItemClickEvent")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import net.undf.abicloud.model.AbiCloudModel;
			import net.undf.abicloud.security.SecurableResource;
			import mx.events.ItemClickEvent;
			
			[Bindable]
			private var _label:String;
			
			[Bindable]
			private var _imageSource:String;
			
			[Bindable]
			private var _headerButton:HeaderButton;
			
			[Bindable]
			private var _enterButtonEnabled:Boolean = true;
			
			private function onCreationComplete():void
			{
				checkSecurableResources();
			}
			
			public function set enterButtonEnabled(flag:Boolean):void
			{
				this._enterButtonEnabled = flag;
			}
			
			override public function set label(value:String):void
			{
				this._label = value;
			}
			
			public function set imageSource(string:String):void
			{
				this._imageSource = string;
			}
			
			public function set headerButton(hB:HeaderButton):void
			{
				this._headerButton = hB;
			}
			
			private function onClickEnterButton():void
			{	
				if(this._enterButtonEnabled)
				{	
					//Notifying that user has interacted with the Dashboard
					var event:ItemClickEvent = new ItemClickEvent("DashboardShortcurtClicked", true);
					event.item = this._headerButton;
					dispatchEvent(event);
				}
			}
			
			private function doZoom(event:MouseEvent):void
			{
				if(this.enabled)
				{
					if (zoomAll.isPlaying) 
	                    zoomAll.reverse();
	                else
	                    // If this is a ROLL_OUT event, play the effect backwards. 
	                    // If this is a ROLL_OVER event, play the effect forwards.
	                    zoomAll.play([shortcurtImage], event.type == MouseEvent.ROLL_OUT ? true : false);
	   			}
			}
			
			/////////////////////////////////////////////////////////////////////////////
			//ISecurableComponent implementation
			
			//Securable Resources of this Securable Component
			private var _securableResource:SecurableResource;
			
			public function set securableResource(sR:SecurableResource):void
			{
				this._securableResource = sR;
			}
			
			/**
			 * For this Securable Component, the Securable Resource will be defined externaly
			 **/
			public function defineSecurableResources():void {}
			
			public function checkSecurableResources():void
			{
				//Since the Securable Resource is defined externaly, we also must check that it is initalized.
				//Otherwise, we consider this Securable Component as unathorized
				if(this._securableResource == null)
					makeUnavailable();
				else if (!this._securableResource.applyAuthorization(AbiCloudModel.getInstance().authorizationManager))
					makeUnavailable();
				else
				{
					//The resource is authorized. Nothing to do
				}
			}
			
			public function makeUnavailable():void 
			{
				this.enabled = false;
			}
		]]>
	</mx:Script>
	<utils:SmoothImage id="shortcurtImage"
					   source="{_imageSource}"
					   maintainAspectRatio="true"
					   horizontalCenter="0" verticalCenter="-10"
					   scaleX="0.8" scaleY="0.8"/>
	
	<mx:Label id="shortcurtLabel"
			  text="{this._label}" fontWeight="bold" fontSize="16"
			  bottom="10" horizontalCenter="0"/>
	
</mx:Canvas>
