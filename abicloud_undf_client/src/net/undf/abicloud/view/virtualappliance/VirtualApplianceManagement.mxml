<?xml version="1.0" encoding="utf-8"?>

<!--
/*
* The contents of this file are subject to the Common Public Attribution License

* Version 1.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://cpal.abiquo.com.



* The License is based on the Mozilla Public License Version 1.1 but Sections 14
* and 15 have been added to cover use of software over a computer network and
* provide for limited attribution for the Original Developer. In addition,



* Exhibit A has been modified to be consistent with Exhibit B.
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License



* for the specific language governing rights and limitations under the License.
*
* The Original Code is abiquo,  14 Jul 2008. The Original Developer is the
* Initial Developer. The Initial Developer of the Original Code is Soluciones Grid,



* S.L.. All portions of the code are Copyright Â© Soluciones Grid, S.L.
* All Rights Reserved.
*/

-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		   xmlns:virtualapplianceComponents="net.undf.abicloud.view.virtualappliance.components.virtualappliance.*"
		   xmlns:virtualImageComponents="net.undf.abicloud.view.virtualimage.components.*"
		   width="100%" height="100%"
		   horizontalGap="0" verticalGap="0" paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" verticalAlign="middle"
		   creationComplete="onCreationComplete()"
		   show="onShow()" xmlns:virtualmachine="net.undf.abicloud.view.infrastructure.components.virtualmachine.*">
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.ChangeWatcher;
			import mx.utils.ObjectUtil;
			import net.undf.abicloud.business.managers.CountdownManager;
			import net.undf.abicloud.vo.infrastructure.State;
			import net.undf.abicloud.vo.virtualappliance.VirtualDataCenter;
			import mx.effects.Move;
			import mx.events.EffectEvent;
			import mx.effects.Resize;
			import net.undf.abicloud.view.virtualappliance.components.node.NodeRenderer;
			import net.undf.abicloud.vo.virtualappliance.NodeVirtualImage;
			import net.undf.abicloud.vo.virtualappliance.NodeType;
			import net.undf.abicloud.view.virtualappliance.components.node.NodeRendererEvent;
			import net.undf.abicloud.view.infrastructure.components.virtualmachine.VirtualMachineRenderer;
			import net.undf.abicloud.events.VirtualApplianceEvent;
			import net.undf.abicloud.view.virtualappliance.components.virtualappliance.VirtualApplianceSelector;
			import mx.core.Application;
			import mx.resources.ResourceManager;
			import mx.resources.ResourceBundle;
			import net.undf.abicloud.view.common.AbiCloudAlert;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import net.undf.abicloud.business.managers.VirtualImageManager;
			import net.undf.abicloud.business.managers.FullScreenManager;
			import net.undf.abicloud.view.virtualappliance.components.virtualappliance.*;
			import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;
			import mx.events.ItemClickEvent;
			import mx.managers.PopUpManager;
			import net.undf.abicloud.events.VirtualImageEvent;
			import net.undf.abicloud.view.virtualimage.components.CategoryRenderer;
			import net.undf.abicloud.vo.virtualimage.Category;
			import net.undf.abicloud.model.AbiCloudModel;
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			
			
			[ResourceBundle("Common")]
			private var rb:ResourceBundle;
			[ResourceBundle("VirtualAppliance")]
			private var rb2:ResourceBundle;
			
			//Pop Up used to manage Virtual Appliance
			private var _virtualApplianceSelector:VirtualApplianceSelector;
			
			//Pop Up to create Virtual Appliance
			private var _virtualApplianceForm:VirtualApplianceForm;
			
			//The VirtualAppliance that will be managed
			[Bindable]
			private var _virtualAppliance:VirtualAppliance;
			
			//The current Virtual DataCenter where we are
			private var _currentVirtualDataCenter:VirtualDataCenter;
			
			//This component is currently displaying more info from this NodeRenderer
			//This is also useful to highlight the NodeRenderer which we are showing more info of
			private var _currentNodeRendererMoreInfo:NodeRenderer;
			
			private var _moveEffect:Move;
			
			/**
			 * When this component is created
			 */
			private function onCreationComplete():void
			{
				//Creating Pop Ups
				_virtualApplianceSelector = new VirtualApplianceSelector();
				_virtualApplianceSelector.addEventListener(VirtualApplianceEvent.VIRTUAL_APPLIANCE_SELECTED, onVirtualApplianceSelected);
				_virtualApplianceSelector.addEventListener("virtualApplianceSelectorClose", closeVirtualApplianceSelector);
				
				this._virtualApplianceForm = new VirtualApplianceForm();
				this._virtualApplianceForm.addEventListener("VirtualApplianceFormClose", closeVirtualApplianceForm);
				
				//Creating other components
				this._currentNodeRendererMoreInfo = null;
				
				this._moveEffect = new Move();
				this._moveEffect.duration = 300;
				
				
				//We register events to know when a VirtualAppliance has been successfully edited or checked
				AbiCloudModel.getInstance().virtualApplianceManager.addEventListener(VirtualApplianceEvent.VIRTUAL_APPLIANCE_EDITED, onVirtualApplianceEditedOrChecked);
				AbiCloudModel.getInstance().virtualApplianceManager.addEventListener(VirtualApplianceEvent.VIRTUAL_APPLIANCE_CHECKED, onVirtualApplianceEditedOrChecked);
				
				//Registering NodeRendererEvents to display or show more info
				addEventListener(NodeRendererEvent.NODERENDERER_SELECTED, onNodeRendererSelected);
				addEventListener(NodeRendererEvent.NODERENDERER_ERASE, onNodeRendererErase);
			}
			
			/**
			 * Everytime this component is shown
			 */
			public function onShow():void
			{
				//Cleaning screen
				hideNodeInfoContainer();
				virtualApplianceDrawTool.setDefaultView();
				
				//Listening for the categories available in the model
				AbiCloudModel.getInstance().virtualImageManager.addEventListener(VirtualImageManager.VIRTUAL_IMAGES_INFORMATION_UPDATED, virtualImagesInformationUpdated);
										
				
				//Requesting the list of repositories and categories
				var event:VirtualImageEvent = new VirtualImageEvent(VirtualImageEvent.GET_VIRTUALIMAGES_INFORMATION);
				dispatchEvent(event);
			}
		
			
			/**
			 * Announces that user wants to go back to VirtualDataCenter management
			 */
			private function backToVirtualDataCenterManagement():void
			{
				if(isVirtualApplianceModified)
				{
					//Asking if user wants to save changes to the VirtualAppliance, before exit from this component
					AbiCloudAlert.showAlert(ResourceManager.getInstance().getString("Common", "ALERT_TITLE_LABEL"),
											 ResourceManager.getInstance().getString("VirtualAppliance", "ALERT_UNSAVED_CHANGES_VIRTUALAPPLIANCE_HEADER"),
											 ResourceManager.getInstance().getString("VirtualAppliance", "ALERT_UNSAVED_CHANGES_VIRTUALAPPLIANCE_TEXT"),
											 Alert.YES | Alert.NO | Alert.CANCEL,
											 onBackToVirtualDataCenterManagementHandler);
				}
				else
					dispatchEvent(new Event("goBackToVirtualDataCenters"));
			}
			
			private function onBackToVirtualDataCenterManagementHandler(closeEvent:CloseEvent):void
			{
				if(closeEvent.detail == Alert.YES)
				{
					//Saving the current Virtual Appliance
					saveVirtualAppliance();
					
					//Going back to VirtualDataCenterManagement
					dispatchEvent(new Event("goBackToVirtualDataCenters"));
				}
				else if(closeEvent.detail == Alert.NO)
				{
					//Going back to VirtualDataCenterManagement
					dispatchEvent(new Event("goBackToVirtualDataCenters"));
				}
				else
				{
					//Do nothing
				}
			}
			
			/**
			 * Sets the VirtualAppliance that will be managed
			 */
			public function set virtualAppliance(virtualAppliance:VirtualAppliance):void
			{				
				this._virtualAppliance = virtualAppliance;
				
				if(this._virtualAppliance)
				{
					this._currentVirtualDataCenter = virtualAppliance.virtualDataCenter;
					
					//Starting BackgroundUpdates when the VirtualAppliance is IN_PROGRESS
					if(this._virtualAppliance.state.id == State.IN_PROGRESS)
					{
						if(! AbiCloudModel.getInstance().countdownManager.clockRunning)
							startBackgroundUpdates();	
					}
					else
					{
						if(AbiCloudModel.getInstance().countdownManager.clockRunning)
							stopBackgroundUpdates();
					}
				}
				virtualApplianceDrawTool.virtualAppliance = null;
			}
			
			private function onVirtualApplianceStateChanged(newState:State):void
			{
				if(newState && newState.id == State.IN_PROGRESS)
				{
					if(! AbiCloudModel.getInstance().countdownManager.clockRunning)
							startBackgroundUpdates();
				}
				else
				{
					if(AbiCloudModel.getInstance().countdownManager.clockRunning)
							stopBackgroundUpdates();
				}
			}
			
			/**
			 * When a Virtual Appliance has been edited or checked, check if it is the one that we are managing
			 */
			private function onVirtualApplianceEditedOrChecked(virtualApplianceEvent:VirtualApplianceEvent):void
			{
				//If the VirtualAppliance that has just been edited is the same that this component is drawing,
				//we replace it to have the last version
				if(this._virtualAppliance && this._virtualAppliance.id == virtualApplianceEvent.virtualAppliance.id)
				{
					virtualAppliance = virtualApplianceEvent.virtualAppliance;
					virtualApplianceDrawTool.virtualAppliance = this._virtualAppliance;
				}
			}
			
			/**
			 * Flag that indicates if the VirtualAppliance that this component is managing, has
			 * unsaved changes
			 */
			public function get isVirtualApplianceModified():Boolean
			{
				return virtualApplianceDrawTool.isVirtualApplianceModified;
			}
			
			/**
			 * Handler for when a VirtualAppliance has been selected in the VirtualApplianceSelector component
			 */
			private function onVirtualApplianceSelected(virtualApplianceEvent:VirtualApplianceEvent):void
			{
				closeVirtualApplianceSelector();
				virtualAppliance = virtualApplianceEvent.virtualAppliance;
				virtualApplianceDrawTool.virtualAppliance = this._virtualAppliance;
			}
			
			/**
			 * Checks if the current VirtualAppliance has unsaved changes, before creating
			 * a new VirtualAppliance
			 */
			private function onVirtualApplianceDrawToolNew():void
			{
				if(isVirtualApplianceModified)
				{
					AbiCloudAlert.showAlert(ResourceManager.getInstance().getString("Common", "ALERT_TITLE_LABEL"),
											 ResourceManager.getInstance().getString("VirtualAppliance", "ALERT_UNSAVED_CHANGES_VIRTUALAPPLIANCE_HEADER"),
											 ResourceManager.getInstance().getString("VirtualAppliance", "ALERT_UNSAVED_CHANGES_VIRTUALAPPLIANCE_TEXT"),
											 Alert.YES | Alert.NO | Alert.CANCEL,
											 onVirtualApplianceDrawToolNewHandler);
				}
				else
				{
					//Opening the VirtualApplianceSelector
					openVirtualApplianceForm();
				}
			}
	
			
			/**
			 * Retrieves user's response
			 */
			private function onVirtualApplianceDrawToolNewHandler(closeEvent:CloseEvent):void
			{
				if(closeEvent.detail == Alert.YES)
				{
					//Saving the current Virtual Appliance
					saveVirtualAppliance();
					
					//Opening the VirtualApplianceForm
					openVirtualApplianceForm();
				}
				else if(closeEvent.detail == Alert.NO)
				{
					//Opening the VirtualApplianceForm
					openVirtualApplianceForm();
				}
				else
				{
					//Do nothing
				}	
			}
			
			/**
			 * Opens the VirtualApplianceForm for VirtualAppliance creation
			 */
			private function openVirtualApplianceForm():void
			{
				PopUpManager.addPopUp(this._virtualApplianceForm, this, true);
				PopUpManager.centerPopUp(this._virtualApplianceForm);
				
				this._virtualApplianceForm.init(null, this._currentVirtualDataCenter);
				
				//Registering VirtualAppliance creation
				AbiCloudModel.getInstance().virtualApplianceManager.addEventListener(VirtualApplianceEvent.VIRTUAL_APPLIANCE_CREATED, onVirtualApplianceCreated);
			}
			
			/**
			 * Closes VirtualApplianceForm Pop Up
			 */
			private function closeVirtualApplianceForm(event:Event):void
			{
				PopUpManager.removePopUp(this._virtualApplianceForm);
				
				//We do not need this event anymore
				AbiCloudModel.getInstance().virtualApplianceManager.removeEventListener(VirtualApplianceEvent.VIRTUAL_APPLIANCE_CREATED, onVirtualApplianceCreated);
			}
			
			private function onVirtualApplianceCreated(virtualApplianceEvent:VirtualApplianceEvent):void
			{
				//Setting this component to manage the VirtualAppliance created
				virtualAppliance = virtualApplianceEvent.virtualAppliance;
				virtualApplianceDrawTool.virtualAppliance = this._virtualAppliance;
			}
			
			/**
			 * Checks if the current VirtualAppliance has unsaved changes, before opening
			 * the VirtualApplianceSelector component
			 */
			private function onVirtualApplianceDrawToolOpen(event:Event = null):void
			{
				if(isVirtualApplianceModified)
				{
					AbiCloudAlert.showAlert(ResourceManager.getInstance().getString("Common", "ALERT_TITLE_LABEL"),
											 ResourceManager.getInstance().getString("VirtualAppliance", "ALERT_UNSAVED_CHANGES_VIRTUALAPPLIANCE_HEADER"),
											 ResourceManager.getInstance().getString("VirtualAppliance", "ALERT_UNSAVED_CHANGES_VIRTUALAPPLIANCE_TEXT"),
											 Alert.YES | Alert.NO | Alert.CANCEL,
											 onVirtualApplianceDrawToolOpenHandler);
				}
				else
				{
					//Opening the VirtualApplianceSelector
					openVirtualApplianceSelector();
				}
					
			}
			
			/**
			 * Retrieves user's response
			 */
			private function onVirtualApplianceDrawToolOpenHandler(closeEvent:CloseEvent):void
			{
				if(closeEvent.detail == Alert.YES)
				{
					//Saving the current Virtual Appliance
					saveVirtualAppliance();
					
					//Opening the VirtualApplianceSelector
					openVirtualApplianceSelector();
				}
				else if(closeEvent.detail == Alert.NO)
				{
					//Opening the VirtualApplianceSelector
					openVirtualApplianceSelector();
				}
				else
				{
					//Do nothing
				}
			}
			
			/**
			 * Asks user to confirm a VirtualAppliance deletion
			 */
			private function onVirtualApplianceDrawToolDelete():void
			{
				AbiCloudAlert.showAlert(ResourceManager.getInstance().getString("Common", "ALERT_TITLE_LABEL"),
											 ResourceManager.getInstance().getString("VirtualAppliance", "ALERT_DELETE_VIRTUALAPPLIANCE_HEADER"),
											 ResourceManager.getInstance().getString("VirtualAppliance", "ALERT_DELETE_VIRTUALAPPLIANCE_TEXT"),
											 Alert.YES | Alert.NO,
											 onVirtualApplianceDrawToolDeleteHandler);
			}
			
			/**
			 * Retrieves user's response when he is asked to confirm a Virtual Appliance deletion
			 */
			private function onVirtualApplianceDrawToolDeleteHandler(closeEvent:CloseEvent):void
			{
				if(closeEvent.detail == Alert.YES)
					deleteVirtualAppliance();	
			}
			
			/**
			 * Deletes the current VirtualAppliance
			 * If the VirtualAppliance is Running, we use a non blocking service to delete it
			 */
			private function deleteVirtualAppliance():void
			{
				var virtualApplianceEvent:VirtualApplianceEvent;
				
				if(this._virtualAppliance.state.id == State.RUNNING)
				{
					virtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.DELETE_VIRTUALAPPLIANCE_NON_BLOCKING);
					virtualApplianceEvent.oldVirtualAppliance = this._virtualAppliance;
					virtualApplianceEvent.virtualAppliance = ObjectUtil.copy(this._virtualAppliance) as VirtualAppliance;
				}
				else
				{
					virtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.DELETE_VIRTUALAPPLIANCE);
					virtualApplianceEvent.virtualAppliance = this._virtualAppliance;
				}
				
				dispatchEvent(virtualApplianceEvent);
				
				this._virtualAppliance = null;
				virtualApplianceDrawTool.virtualAppliance = null;
				
				openVirtualApplianceSelector();
			}
			
			/**
			 * Opens the VirtualApplianceSelector component
			 */
			private function openVirtualApplianceSelector():void
			{
				PopUpManager.addPopUp(this._virtualApplianceSelector, this, true);
				PopUpManager.centerPopUp(this._virtualApplianceSelector);
			}
			
			/**
			 * Closes the VirtualApplianceSelector component
			 */
			private function closeVirtualApplianceSelector(event:Event = null):void
			{
				//Closing the Pop Up
				PopUpManager.removePopUp(_virtualApplianceSelector);
			}
			
			private function onVirtualApplianceDrawToolSave():void
			{
				saveVirtualAppliance();
			}
			
			/**
			 * Saves the current VirtualAppliance
			 * This function can be called from outside this component
			 */
			public function saveVirtualAppliance():void
			{
				var virtualApplianceEvent:VirtualApplianceEvent
				//If the VirtualAppliance is Running, we use a non blocking service to edit it
				if(this._virtualAppliance.state.id == State.RUNNING)
						virtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.EDIT_VIRTUALAPPLIANCE_NOT_BLOCKING);
					else	
						virtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.EDIT_VIRTUALAPPLIANCE);
						
				virtualApplianceEvent.virtualAppliance = virtualApplianceDrawTool.virtualApplianceCopy;
				virtualApplianceEvent.oldVirtualAppliance = this._virtualAppliance;
				dispatchEvent(virtualApplianceEvent);	
			}
			
			/**
			 * Powers on or off the current Virtual Appliance
			 */
			private function onVirtualApplianceDrawToolPowerOnOff():void
			{
				var event:VirtualApplianceEvent;
				
				if(_virtualAppliance.state.id == State.RUNNING)
				{
					//The Virtual Appliance is running. We proceed to power it off
					event = new VirtualApplianceEvent(VirtualApplianceEvent.SHUTDOWN_VIRTUALAPPLIANCE);
				}
				else
				{
					//The Virtual Appliance is powered off We proceed to power it on
					event = new VirtualApplianceEvent(VirtualApplianceEvent.START_VIRTUALAPPLIANCE);
				}
				
				event.virtualAppliance = ObjectUtil.copy(this._virtualAppliance) as VirtualAppliance;
				event.oldVirtualAppliance = this._virtualAppliance;
				dispatchEvent(event);
				
				hideNodeInfoContainer();
			}
			
			
			/////////////////////////////////////////////
			//VIRTUAL IMAGES AND OTHER NODE CONENT RELATED
			/**
			 * Listener for new Categories available in the model
			 */
			private function virtualImagesInformationUpdated(event:Event):void
			{
				//We do not need this event anymore
				AbiCloudModel.getInstance().virtualImageManager.removeEventListener(VirtualImageManager.VIRTUAL_IMAGES_INFORMATION_UPDATED, virtualImagesInformationUpdated);
				
				//Listening for virtual images available in the model
				AbiCloudModel.getInstance().virtualImageManager.addEventListener(VirtualImageManager.VIRTUALIMAGES_UPDATED, onVirtualImagesUpdated);
				
				//When the categories has been received, we can now ask for the virtual images
				var virtualImageEvent:VirtualImageEvent = new VirtualImageEvent(VirtualImageEvent.GET_VIRTUALIMAGES_BY_USER);
				dispatchEvent(virtualImageEvent);
			}
			
			/**
			 * Initializes the VirtualImageAccordion, when new virtual images are available in 
			 * the model
			 */
			private function onVirtualImagesUpdated(event:Event):void
			{
				//We do not need this event anymore
				AbiCloudModel.getInstance().virtualImageManager.removeEventListener(VirtualImageManager.VIRTUALIMAGES_UPDATED, onVirtualImagesUpdated);
				
				virtualImagesAccordion.categories = AbiCloudModel.getInstance().virtualImageManager.categories;
				
				//Provisional... NodeTypeView in VirtuaLApplianceDrawTool also needs the Categories
				virtualApplianceDrawTool.nodeTypeView.virtualImageCategories = AbiCloudModel.getInstance().virtualImageManager.categories;
				
				//Once we have all information retrieved, we can set the drawing area
				virtualApplianceDrawTool.virtualAppliance = this._virtualAppliance;	
			}
			
			/**
			 * When a NodeRenderer has been selected, we show more info about it, if it exists
			 * If there is no more information related, we hidde the nodeInfoContainer
			 */
			private function onNodeRendererSelected(nodeRendererEvent:NodeRendererEvent):void
			{
				//We say to old NodeRenderer that is no longer selected
				if(this._currentNodeRendererMoreInfo)
					this._currentNodeRendererMoreInfo.isSelected = false;
					
				//Saving the NodeRenderer which more info will be displayed
				this._currentNodeRendererMoreInfo = nodeRendererEvent.nodeRenderer;
				
				//Checking the Node type
				switch(nodeRendererEvent.nodeRenderer.node.nodeType.id)
				{
					case NodeType.VIRTUALIMAGE:
						showNodeVirtualImage(nodeRendererEvent.nodeRenderer.node as NodeVirtualImage);
						break;
						
					default:
						hideNodeInfoContainer();
				}
			}
			
			/**
			 * When someone has anounced that any NodeRenderer has been selected, we hide the
			 * NodeInfoContainer
			 */
			private function onNodeRendererAnySelected(nodeRendererEvent:NodeRendererEvent):void
			{
				hideNodeInfoContainer();
			}
			
			/**
			 * Handler for when a NodeRenderer is about to be erased
			 * If this component is displaying the information of the Node related to the
			 * NodeRenderer that is about to be erased, we hide the nodeMoreInfoContainer
			 */
			private function onNodeRendererErase(nodeRendererEvent:NodeRendererEvent):void
			{
				if(nodeRendererEvent.nodeRenderer == this._currentNodeRendererMoreInfo)
					hideNodeInfoContainer();
			}
			
			/**
			 * Shows the VirtualMachine assigned to a NodeVirtualImage (if it exists)
			 */
			private function showNodeVirtualImage(nodeVirtualImage:NodeVirtualImage):void
			{
				if(nodeVirtualImage.virtualMachine != null)
				{
					virtualMachineRenderer.init(nodeVirtualImage.virtualMachine);
					showNodeInfoContainer();
				}
				else
					hideNodeInfoContainer();
				
			}
			
			/**
			 * Shows the nodeInfoContainer
			 */
			private function showNodeInfoContainer():void
			{
				//Marking the currentNodeRendererInfo as selected
				this._currentNodeRendererMoreInfo.isSelected = true;
				
				if(! nodeInfoContainer.visible)
				{
					nodeInfoContainer.visible = true;
					this._moveEffect.yFrom = container.height;
					this._moveEffect.yTo = container.height - nodeInfoContainer.height;
					this._moveEffect.play([nodeInfoContainer]);
				}
			}
			
			/**
			 * Hides the nodeInfoContainer
			 */
			private function hideNodeInfoContainer():void
			{
				//Marking the currentNodeRendererMoreInfo as unselected
				if(this._currentNodeRendererMoreInfo)
					this._currentNodeRendererMoreInfo.isSelected = false;
				this._currentNodeRendererMoreInfo = null;
				
				if(nodeInfoContainer.visible)
				{
					this._moveEffect.yFrom = nodeInfoContainer.y;
					this._moveEffect.yTo = nodeInfoContainer.y + nodeInfoContainer.height;
					this._moveEffect.addEventListener(EffectEvent.EFFECT_END, onEndMoveEffect);
					this._moveEffect.play([nodeInfoContainer]);
				}
			}
			
			private function onEndMoveEffect(effectEvent:EffectEvent):void
			{
				this._moveEffect.removeEventListener(EffectEvent.EFFECT_END, onEndMoveEffect);
				nodeInfoContainer.visible = false;
				
			}
			private function onClickHideButton():void
			{
				hideNodeInfoContainer();
			}
			
			////////////////////////////////////////////
			//BACKGROUND UPDATES
			
			/**
			 * Starts all backgrounds updates that this component may have
			 * Only this component control when the background updates can start
			 */
			private function startBackgroundUpdates():void
			{
				//Unregistering previous events that may be registered
				AbiCloudModel.getInstance().countdownManager.removeEventListener(CountdownManager.COUNTDOWN_COMPLETE_EVENT, checkVirtualAppliance);
				
				//Registering new events
				AbiCloudModel.getInstance().countdownManager.addEventListener(CountdownManager.COUNTDOWN_COMPLETE_EVENT, checkVirtualAppliance);
				
				//Starting timer
				AbiCloudModel.getInstance().countdownManager.startAutoCountdown(AbiCloudModel.getInstance().configurationManager.config.VIRTUAL_APPLIANCES_UPDATE_INTERVAL);
			}
			
			/**
			 * Stops all background automatic updates that this component may have
			 */
			private function stopBackgroundUpdates():void
			{
				//Stopping timer
				AbiCloudModel.getInstance().countdownManager.stopAutoCountdown();
				
				//Unregistering all events for timer
				AbiCloudModel.getInstance().countdownManager.removeEventListener(CountdownManager.COUNTDOWN_COMPLETE_EVENT, checkVirtualAppliance);
			}
			
			private function checkVirtualAppliance(event:Event):void
			{
				var virtualApplianceEvent:VirtualApplianceEvent = new VirtualApplianceEvent(VirtualApplianceEvent.CHECK_VIRTUAL_APPLIANCE);
				virtualApplianceEvent.virtualAppliance = this._virtualAppliance;
				dispatchEvent(virtualApplianceEvent);
			}
			
			//////////////////////////////////////////
			// FULL SCREEN FUNCTIONALITY
            private function makeFullScreen():void 
            {
            	if(systemManager.stage.displayState == StageDisplayState.NORMAL)
                	FullScreenManager.getInstance().makeFullScreen(container);	
            }
		]]>
	</mx:Script>
	
	<!-- Virtual Resources -->
	<mx:Canvas  
			   width="200" height="100%"
			   verticalScrollPolicy="off" horizontalScrollPolicy="off"
			   backgroundColor="#FFFFFF">
		
		<mx:HBox top="0" height="18" width="100%" styleName="cabeceraPanel" 
				horizontalGap="0" paddingLeft="5" verticalAlign="middle">
			<mx:Label text="@Resource(bundle='VirtualAppliance', key='LABEL_VIRTUAL_RESOURCES')" styleName="titlePanel" height="14"/>
		</mx:HBox>
		
		<!-- Navigator back to VirtualDataCenterManagement -->
		<mx:HBox width="100%" height="32" top="18" verticalAlign="middle" horizontalGap="2" paddingLeft="10" paddingRight="10" styleName="cabeceraPanelGris">
			<mx:Label id="virtualApplianceName" maxWidth="160" verticalCenter="0"
					  text="{this._virtualAppliance.name}" truncateToFit="true" styleName="titleAlert"/>
			<mx:Spacer width="100%" height="30"/>
					  
			<mx:Button id="backToVirtualApplianceManagButton" right="0" verticalCenter="0"
			   click="backToVirtualDataCenterManagement()" styleName="bBackApp"
			   toolTip="@Resource(bundle='Common', key='BUTTON_RETURN_TOOLTIP')"/>
		</mx:HBox>
		
		<!-- Virtual Images Accordion -->
		<virtualImageComponents:VirtualImageAccordion id="virtualImagesAccordion"
													  top="50" bottom="0" width="100%"
													  editable="false"/>
	</mx:Canvas>
		
	<mx:Spacer width="10" />
	
	<!-- Virtual Appliance Draw Tool -->
	<mx:Canvas width="100%" height="100%"
			 id="container"
			 verticalScrollPolicy="off" horizontalScrollPolicy="off">
			 
		<mx:HBox width="100%" height="18" styleName="cabeceraPanel" 
			paddingLeft="5" verticalAlign="middle" horizontalGap="0" paddingTop="0">
			<mx:Label text="@Resource(bundle='VirtualAppliance', key='LABEL_VIRTUAL_APPLIANCE')" styleName="titlePanel" height="14"/>
			
			<mx:Spacer width="100%"/>
			
			<mx:Button styleName="fullScreenButton"
					   click="makeFullScreen()"/>
		</mx:HBox>
		
		<virtualapplianceComponents:VirtualApplianceDrawTool id="virtualApplianceDrawTool"
															 top="18" bottom="0" width="100%"
															 virtualApplianceDrawToolNew="onVirtualApplianceDrawToolNew()"
															 virtualApplianceDrawToolOpen="onVirtualApplianceDrawToolOpen()"
															 virtualApplianceDrawToolDelete="onVirtualApplianceDrawToolDelete()"
															 virtualApplianceDrawToolSave="onVirtualApplianceDrawToolSave()"
															 virtualApplianceDrawToolPowerOnOff="onVirtualApplianceDrawToolPowerOnOff()"/>
		
		<!-- Node info -->
		<mx:Canvas id="nodeInfoContainer" visible="false"
										  width="100%" height="153"  bottom="0">
				<mx:Button 	id="hideButton" styleName="buttonUpDown"
					width="49" height="10"
					top="0" horizontalCenter="0"
					click="onClickHideButton()"/>
					
				<virtualmachine:VirtualMachineRenderer id="virtualMachineRenderer" width="100%" top="10" bottom="0"/>
		</mx:Canvas>
	</mx:Canvas>

</mx:HBox>
