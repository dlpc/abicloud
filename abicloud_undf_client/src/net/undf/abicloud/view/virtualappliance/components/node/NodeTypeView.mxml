<?xml version="1.0" encoding="utf-8"?>

<!--
/*
* The contents of this file are subject to the Common Public Attribution License

* Version 1.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://cpal.abiquo.com.



* The License is based on the Mozilla Public License Version 1.1 but Sections 14
* and 15 have been added to cover use of software over a computer network and
* provide for limited attribution for the Original Developer. In addition,



* Exhibit A has been modified to be consistent with Exhibit B.
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License



* for the specific language governing rights and limitations under the License.
*
* The Original Code is abiquo,  14 Jul 2008. The Original Developer is the
* Initial Developer. The Initial Developer of the Original Code is Soluciones Grid,



* S.L.. All portions of the code are Copyright Â© Soluciones Grid, S.L.
* All Rights Reserved.
*/

-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		   width="100%" height="100%"
		   horizontalScrollPolicy="off"
		   implements="net.undf.abicloud.view.virtualappliance.components.node.INodeView"
		   creationComplete="onCreationComplete()"
		   backgroundColor="#FFFFFF" borderStyle="solid"
		   verticalAlign="top" verticalGap="0"
		   paddingTop="0" paddingRight="0" paddingLeft="0" paddingBottom="0">
	
	<!-- Displays a VirtualAppliance's list of nodes, using containers for each type of Nodes
		 This component uses an Inversion of Control pattern: NodeTypeView will only create the containers
		 but will not add them to the display list. Each Node container will have to listen the NodeRendererEvents that
		 this NodeTypeView will dispatch, in order to know when has to display itself, when has to draw a Node, or when has
		 to erase a Node
		 -->
		 
	<mx:Script>
		<![CDATA[
			import net.undf.abicloud.vo.virtualappliance.Node;
			import mx.binding.utils.BindingUtils;
			import net.undf.abicloud.vo.virtualimage.Category;
			import net.undf.abicloud.model.AbiCloudModel;
			import mx.collections.ArrayCollection;
			
			//Flag that indicates if this component is called to display Nodes
			//When false, this component will take any action against NodeRendererEvents
			private var _isDisplayingNodes:Boolean = false;
			
			//The INodeViewController that contains and controls this INodeView
			private var _iNodeViewController:INodeViewController = null;
			
			//VirtualImage's Categories that NodeVirtualImageContainer needs to display NodeVirtualImage items
			private var _virtualImageCategories:ArrayCollection;
			
			//The XML document that describes the connections between NodeRenderers
			private var _nodeConnections:XML;
			
			private function onCreationComplete():void
			{
				//Creating containers for NodeNetwork and NodeStorage
				//We cannot create the container for NodeVirtualImage until the list with
				//the VirtualImage Categories is available
				createNodeStorageContainer();
				createNodeNetworkContainer();
			}
			
			
			public function set virtualImageCategories(value:ArrayCollection):void
			{
				this._virtualImageCategories = value;
				
				//We can now create containers for NodeVirtualImage
				createNodeVirtualImageContainer();
			}
			
			/**
			 * Creates a NodeVirtualImageContainer for each VirtualImage Category
			 */
			private function createNodeVirtualImageContainer():void
			{
				//If other NodeVirtualImageContainer exists, we destroy them
				dispatchEvent(new Event("deleteAllNodeVirtualImageContainer"));
				
				//We need a NodeTypeView_virtualImage for each virtual image category
				var length:int = this._virtualImageCategories.length
				var i:int;
				var nodeVirtualImageContainer:NodeVirtualImageContainer;
				for(i = 0; i < length; i++)
				{
					nodeVirtualImageContainer = new NodeVirtualImageContainer();
					nodeVirtualImageContainer.width = width;
					nodeVirtualImageContainer.virtualImageCategory = this._virtualImageCategories.getItemAt(i) as Category;
					nodeVirtualImageContainer.nodeTypeView = this;
				}
			}
			
			/**
			 * Creates a NodeStorageContainer
			 */
			private function createNodeStorageContainer():void
			{
				
			}
			
			/**
			 * Creates a NodeNetworkContainer
			 */
			private function createNodeNetworkContainer():void
			{
				
			}
			
			/**
			 * Handler for click over the NodeTypeView
			 */
			 /*
			private function onClick(event:Event):void
			{
				//If the click was not made over a NodeRenderer, we dispatch this event to inform that any NodeRenderer
				//has been selected, since user has made click over this component, instead of over a NodeRenderer
				if(event.target == this)
				{
					var nodeRendererEvent:NodeRendererEvent = new NodeRendererEvent(NodeRendererEvent.NODERENDERER_ANY_SELECTED);
					dispatchEvent(nodeRendererEvent);
				}
			}*/
			
			/////////////////////////////////////////////////
			//DRAWING FUNCTIONALITY & INodeView implementation
			
			public function set nodeViewController(inodeViewController:INodeViewController):void
			{
				if(this._iNodeViewController != null)
				{
					//Unregistering events from the old INodeViewController
					EventDispatcher(this._iNodeViewController).removeEventListener(NodeRendererEvent.NODERENDERER_ERASED, onNodeRendererErased);
					EventDispatcher(this._iNodeViewController).removeEventListener(NodeRendererEvent.NODERENDERER_ADDED, onNodeRendererAdded);
				}
				
				this._iNodeViewController = inodeViewController;
				
				//Registering events
				EventDispatcher(this._iNodeViewController).addEventListener(NodeRendererEvent.NODERENDERER_ERASED, onNodeRendererErased);
				EventDispatcher(this._iNodeViewController).addEventListener(NodeRendererEvent.NODERENDERER_ADDED, onNodeRendererAdded);
			}
			
			public function get isDisplayingNodes():Boolean
			{
				return this._isDisplayingNodes;
			}
			
			public function set isDisplayingNodes(value:Boolean):void
			{
				this._isDisplayingNodes = value;
			}
			
			public function fromINodeViewToNode(point:Point):Point
			{
				//Since NodeRenderers can not be moved here, NodeTypeView will always return (0,0)
				return new Point(0, 0);
			}
			
			public function fromNodeToINodeView(point:Point):Point
			{
				//Since NodeRenderers can not be moved here, NodeTypeView will always return (0,0)
				return new Point(0, 0);
			}
			
			
			/**
			 * Removes all Nodes that this component may be drawing
			 */
			public function cleanNodes():void
			{
				var event:Event = new Event("cleanNodes", false);
				dispatchEvent(event);
			}
			
			public function drawNodes(nodes:ArrayCollection, nodeConnections:XML):void
			{
				this._nodeConnections = nodeConnections;
				
				var length:int = nodes.length;
				var i:int;
				for(i = 0; i < length; i++)
				{
					//We do not draw erased nodes
					if(NodeRenderer(nodes.getItemAt(i)).node.modified != Node.NODE_ERASED)
						drawNode(nodes.getItemAt(i) as NodeRenderer);
				}
			}
			
			/**
			 * Draws a Node Renderer in the Drawing Area
			 **/
			private function drawNode(nodeRenderer:NodeRenderer):void
			{
				//Quickfix
				nodeRenderer.setStyle("backgroundAlpha", 0);
				
				//Announcing to Node containers that a new Node must be drawn
				var nodeRendererEvent:NodeRendererEvent = new NodeRendererEvent(NodeRendererEvent.NODERENDERER_ADDED, false);
				nodeRendererEvent.nodeRenderer = nodeRenderer;
				dispatchEvent(nodeRendererEvent);
			}
			
			/**
			 * Captures whenever user has added a new NodeRenderer
			 */
			private function onNodeRendererAdded(event:NodeRendererEvent):void
			{
				if(this._isDisplayingNodes)
					drawNode(event.nodeRenderer);
			}

			
			/**
			 * Captues whenever user wants to erase a NodeRenderer
			 **/
			private function onNodeRendererErased(event:NodeRendererEvent):void
			{
				if(this._isDisplayingNodes)
					eraseNodeRenderer(event.nodeRenderer);	
			}

			
			/**
			 * Erases the given Node from the DrawingArea, marking it as erased
			 **/
			private function eraseNodeRenderer(nodeRenderer:NodeRenderer):void
			{
				//Announcing to the Node containers that a Node must be erased
				var nodeRendererEvent:NodeRendererEvent = new NodeRendererEvent(NodeRendererEvent.NODERENDERER_ERASED, false);
				nodeRendererEvent.nodeRenderer = nodeRenderer;
				dispatchEvent(nodeRendererEvent);
				
				//We have to delete the connection to and from the NodeRenderer that has been erased
				var xmlList:XMLList = this._nodeConnections.child("connection");
				var length:int = xmlList.length();
				var i:int;
				
				for(i = length - 1; i >= 0; i--)
				{
					if(xmlList[i].@nodeFromID == nodeRenderer.node.id ||
					   xmlList[i].@nodeToID == nodeRenderer.node.id)
					{
						delete this._nodeConnections.connection[i];
					}
				}
			}
		]]>
	</mx:Script>
</mx:VBox>
