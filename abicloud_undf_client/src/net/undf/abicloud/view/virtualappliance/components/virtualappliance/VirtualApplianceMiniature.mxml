<?xml version="1.0" encoding="utf-8"?>

<!--
/*
* The contents of this file are subject to the Common Public Attribution License

* Version 1.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://cpal.abiquo.com.



* The License is based on the Mozilla Public License Version 1.1 but Sections 14
* and 15 have been added to cover use of software over a computer network and
* provide for limited attribution for the Original Developer. In addition,



* Exhibit A has been modified to be consistent with Exhibit B.
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License



* for the specific language governing rights and limitations under the License.
*
* The Original Code is abiquo,  14 Jul 2008. The Original Developer is the
* Initial Developer. The Initial Developer of the Original Code is Soluciones Grid,



* S.L.. All portions of the code are Copyright Â© Soluciones Grid, S.L.
* All Rights Reserved.
*/

-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns:utils="net.undf.abicloud.utils.*"
		   width="201" height="201"
		   verticalScrollPolicy="off" horizontalScrollPolicy="off"
		   useHandCursor="true" buttonMode="true" mouseChildren="false">
	
	<!-- Miniature that represents a Virtual Appliance -->

	<mx:Script>
		<![CDATA[
			import mx.controls.Image;
			import mx.managers.DragManager;
			import mx.core.DragSource;
			import net.undf.abicloud.vo.infrastructure.State;
			import mx.events.ItemClickEvent;
			import net.undf.abicloud.vo.virtualappliance.VirtualAppliance;
			
			//The virtual image
			[Bindable]
			private var _virtualAppliance:VirtualAppliance;
			
			override public function set data(value:Object):void
			{
				super.data = value;
				if(value && value is VirtualAppliance)
					virtualAppliance = value as VirtualAppliance;
			}
			
			public function set virtualAppliance(vA:VirtualAppliance):void
			{
				this._virtualAppliance = vA;
			}
			
			public function get virtualAppliance():VirtualAppliance
			{
				return this._virtualAppliance;
			}

		]]>
	</mx:Script>
	
	<mx:Canvas top="1" bottom="1" left="1" right="1"
			   verticalScrollPolicy="off" horizontalScrollPolicy="off"
			   backgroundColor="#F4F4F4" backgroundAlpha="0.8"
			   borderThickness="1" borderColor="#cccccc" borderStyle="solid">
		
		<utils:SmoothImage right="10" top="10" width="14" height="14"
						   visible="{this._virtualAppliance.state.id != State.IN_PROGRESS}"
						   source="{(this._virtualAppliance.state.id == State.RUNNING) ? 'assets/buttonsMenu/verde.png' : 'assets/buttonsMenu/rojo.png'}"/>
								   			
		<mx:SWFLoader id="busyIcon"
				  	  source="assets/buttonsMenu/CargaPeque.swf" scaleContent="true" maintainAspectRatio="true"
				      right="10" top="10" width="14" height="14"
				      visible="{this._virtualAppliance.state.id == State.IN_PROGRESS}"/>
		
		<utils:SmoothImage width="18" height="18" right="8" top="30"
						  source="assets/virtualappliance/alert.png"
						  visible="{this._virtualAppliance.error ? true:false}"/>
				      
		<utils:SmoothImage id="virtualApplianceIcon" verticalCenter="0" horizontalCenter="0"
				  source="assets/virtualappliance/VirtualAppliance.png" scaleContent="true" maintainAspectRatio="true"
				  top="5" bottom="20" left="30" right="10"/>
				  
		
		<mx:Label horizontalCenter="0" bottom="5"
				  text="{_virtualAppliance.name}" 
				  fontWeight="bold" fontSize="10"/>
	</mx:Canvas>
	
</mx:Canvas>
