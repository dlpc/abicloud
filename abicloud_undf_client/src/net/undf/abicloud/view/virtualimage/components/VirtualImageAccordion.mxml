<?xml version="1.0" encoding="utf-8"?>

<!--
/*
* The contents of this file are subject to the Common Public Attribution License

* Version 1.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://cpal.abiquo.com.



* The License is based on the Mozilla Public License Version 1.1 but Sections 14
* and 15 have been added to cover use of software over a computer network and
* provide for limited attribution for the Original Developer. In addition,



* Exhibit A has been modified to be consistent with Exhibit B.
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License



* for the specific language governing rights and limitations under the License.
*
* The Original Code is abiquo,  14 Jul 2008. The Original Developer is the
* Initial Developer. The Initial Developer of the Original Code is Soluciones Grid,



* S.L.. All portions of the code are Copyright Â© Soluciones Grid, S.L.
* All Rights Reserved.
*/

-->
<mx:Accordion xmlns:mx="http://www.adobe.com/2006/mxml" 
			  width="100%" height="100%"
			  headerRenderer="net.undf.abicloud.view.virtualimage.components.VirtualImageAccordionHeader">
	
	<mx:Script>
		<![CDATA[
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			import net.undf.abicloud.vo.virtualimage.Category;
			import net.undf.abicloud.events.VirtualImageEvent;
			import net.undf.abicloud.model.AbiCloudModel;
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			
			
			//Array Collection containing CategoryRenderer for each Category in the model
			private var _categoriesRenderers:ArrayCollection = new ArrayCollection();
			
			//Multiplies the size of the Virtual Images Miniatures
			private var _sizeMultiplier:Number = 1;
			
			//Indicates if the Virtual Images displayed can be editable
			private var _editable:Boolean = false;
			
			
			/**
			 * Sets the sizeMultiplier for the Virtual Image miniatures
			 **/
			public function set sizeMultiplier(multiplier:Number):void
			{
				this._sizeMultiplier = multiplier;
			}
			
			/**
			 * Sets the editable flag
			 * When editable is set true, VirtualImageAccordion will be listening for editions in VirtualImages
			 * to update its CategoryRenderers
			 **/
			public function set editable(flag:Boolean):void
			{
				if(this._editable && ! flag)
				{
					//This component was editable, but not anymore. Removing listener
					AbiCloudModel.getInstance().virtualImageManager.removeEventListener(VirtualImageEvent.VIRTUAL_IMAGE_EDITED, onVirtualImageEdited);
				}
				else if(! this._editable && flag)
				{
					//This component was not editable, but it is now. Registering listener
					AbiCloudModel.getInstance().virtualImageManager.addEventListener(VirtualImageEvent.VIRTUAL_IMAGE_EDITED, onVirtualImageEdited);
				}
				
				this._editable = flag;
				
				//Updating accordion headers
				if(this.numChildren > 0)
					setAccordionHeadersAcceptDrop();
			}
			
			/**
			 * Initializes this component, creating a CategoryRenderer for each
			 * category present in the ArrayCollection categories
			 * Each CategoryRenderer will draw all the Virtual Images that belongs to that category
			 */
			public function set categories(categories:ArrayCollection):void
			{
				this._categoriesRenderers = new ArrayCollection();
				this.removeAllChildren();
				
				var length:int = categories.length;
				var i:int;
				var categoryRenderer:CategoryRenderer;
				
				//Building the renderers
				for(i = 0; i < length; i++)
				{
					categoryRenderer = new CategoryRenderer();
					categoryRenderer.sizeMultiplier = this._sizeMultiplier;
					categoryRenderer.editable = this._editable;
					categoryRenderer.category = categories.getItemAt(i) as Category;
					
					
					//Adding the category renderer to the list and to the accordion
					_categoriesRenderers.addItem(categoryRenderer);
					this.addChild(categoryRenderer);
				}
				
				setAccordionHeadersAcceptDrop();
			}
			
			private function setAccordionHeadersAcceptDrop():void
			{
				var length:int = this._categoriesRenderers.length;
				var i:int;
				
				for(i = 0; i < length; i++)
				{
					VirtualImageAccordionHeader(this.getHeaderAt(i)).acceptDrop = this._editable;
				}
			}
			
			/**
			 * Handler for when a VirtualImage has been edited
			 */
			private function onVirtualImageEdited(virtualImageEvent:VirtualImageEvent):void
			{
				//When a virtual image has been edited, VirtualImageAccordion notifies it to its CategoryRenderer's
				var length:int = this._categoriesRenderers.length;
				var i:int;
				
				for(i = 0; i < length; i++)
				{
					CategoryRenderer(this._categoriesRenderers.getItemAt(i)).virtualImageEdited(virtualImageEvent.virtualImage);
				}
			}
		]]>
	</mx:Script>
</mx:Accordion>
