<?xml version="1.0" encoding="utf-8"?>

<!--
/*
* The contents of this file are subject to the Common Public Attribution License

* Version 1.0 (the "License"); you may not use this file except in compliance
* with the License. You may obtain a copy of the License at http://cpal.abiquo.com.



* The License is based on the Mozilla Public License Version 1.1 but Sections 14
* and 15 have been added to cover use of software over a computer network and
* provide for limited attribution for the Original Developer. In addition,



* Exhibit A has been modified to be consistent with Exhibit B.
*
* Software distributed under the License is distributed on an "AS IS" basis,
* WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License



* for the specific language governing rights and limitations under the License.
*
* The Original Code is abiquo,  14 Jul 2008. The Original Developer is the
* Initial Developer. The Initial Developer of the Original Code is Soluciones Grid,



* S.L.. All portions of the code are Copyright Â© Soluciones Grid, S.L.
* All Rights Reserved.
*/

-->
<AbiCloudPopUp xmlns="net.undf.abicloud.view.common.*" xmlns:mx="http://www.adobe.com/2006/mxml"
			   titleText="@Resource(bundle='VirtualImage', key='POPUP_TITLE_ICON_ADD')"
			   xmlns:utils="net.undf.abicloud.utils.*">
	
	<mx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			import net.undf.abicloud.business.managers.VirtualImageManager;
			import net.undf.abicloud.vo.virtualimage.Icon;
			import net.undf.abicloud.events.VirtualImageEvent;
			import net.undf.abicloud.vo.virtualimage.VirtualImage;
			import net.undf.abicloud.vo.virtualimage.Repository;
			
			private var _iconValid:Boolean;
			
			private var _icon:Icon;
			
			/**
			 * Initializes this component to create or edit an Icon
			 **/
			public function init(icon:Icon = null):void
			{
				this._icon = icon;
				
				if(this._icon == null)
				{
					//Create a new icon
					nameInput.text = "";
					urlInput.text = "";
					iconImage.load(VirtualImageManager.DEFAULT_ICON_IMAGE_PATH);
					acceptButton.enabled = false;
				}
				else
				{
					//Edit an existing icon
					nameInput.text = this._icon.name;
					urlInput.text = this._icon.path;
					iconImage.load(this._icon.path);
					acceptButton.enabled = true;
				}
				
				nameInput.setFocus();
			}
			
			private function onClickValidateIcon():void
			{
				iconImage.load(urlInput.text);
			}
			
			/**
			 * When user clicks Accept button, we save the new icon or the edited icon
			 **/
			 private function onAccept():void
			 {
			 	var virtualImageEvent:VirtualImageEvent;
			 	
			 	if(this._icon == null)
			 	{
			 		//Creating the new icon
				 	this._icon = new Icon();
				 	this._icon.name = nameInput.text;
				 	this._icon.path = urlInput.text;
				 	
				 	//Announcing that user wants to create a new icon
				 	virtualImageEvent = new VirtualImageEvent(VirtualImageEvent.CREATE_ICON);
				 	virtualImageEvent.icon = this._icon;
			 	}
			 	else
			 	{
			 		//Editing the icon, without modifying the original one until
			 		//changes are saved in server
			 		var iconEdited:Icon = ObjectUtil.copy(this._icon) as Icon;
			 		iconEdited.name = nameInput.text;
			 		iconEdited.path = urlInput.text;
			 		
			 		//Announcing that user wants to edit an icon
			 		virtualImageEvent = new VirtualImageEvent(VirtualImageEvent.EDIT_ICON);
			 		virtualImageEvent.icon = iconEdited;
			 		virtualImageEvent.oldIcon = this._icon;
			 	}
			 	
			 	dispatchEvent(virtualImageEvent);
			 	
			 	//Closing the form
			 	onCancel();
			 }
			 
			 /**
			 * Cancels Repository creation
			 **/
			 private function onCancel():void
			 {
			 	//Closing the form
				dispatchEvent(new Event("IconFormClose"));
			 }
			 
			 /**
			 * Activates the Accept Button if the form is valid
			 **/
			 private function validateForm():void
			 {
			 	if(nameInput.text.length > 0 && iconImage.loadSuccess)
			 	    acceptButton.enabled = true;
			 	   
			 	else
			 		acceptButton.enabled = false;
			 }
			 
			 /**
			 * Basic behaivour is as follows:
			 * If user presses the Enter, in any part of this Pop Up (except buttons), it would be
			 * like Accept Button has been pressed
			 */
			override protected function keyboardHandler(keyboardEvent:KeyboardEvent):void
			{
				if(keyboardEvent.target == acceptButton || keyboardEvent.target == cancelButton)
					super.keyboardHandler(keyboardEvent);
				else
				{
					if(keyboardEvent.keyCode == 13 && acceptButton.enabled)
						onAccept();
				}
			}
			 
		]]>
	</mx:Script>
	
	<mx:Form paddingTop="3">
		<mx:FormItem label="@Resource(bundle='Common', key='TEXTINPUT_LABEL_NAME')" required="true">
			<mx:TextInput id="nameInput" maxChars="19"
					      change="validateForm()" height="20"/>
		</mx:FormItem>
		
		<mx:FormItem label="@Resource(bundle='VirtualImage', key='TEXTINPUT_LABEL_URL')" required="true"
				     direction="horizontal">
			<mx:VBox>
				<mx:TextArea id="urlInput" maxChars="199"/>
							 
				<mx:Button id="validateButton" label="@Resource(bundle='Common', key='BUTTON_VALIDATE')" height="18"
						   click="onClickValidateIcon()"/>
						   
				<mx:Label id="imageLoadErrorLabel" text="@Resource(bundle='VirtualImage', key='IMAGE_LOAD_ERROR_LABEL')"
						  visible="{! iconImage.loadSuccess}" includeInLayout="{! iconImage.loadSuccess}" color="#EE0000"/>					   
			</mx:VBox>
			
			<mx:Canvas borderStyle="solid" borderThickness="1" borderColor="#AAAAAA" backgroundColor="#F4F4F4"
					   width="100" height="100">
				<utils:ImageDefault id="iconImage" width="100%" height="100%"/>	
			</mx:Canvas>
			
		</mx:FormItem>
		
		
		<mx:FormItem direction="horizontal">
			<mx:Button id="acceptButton" label="@Resource(bundle='Common', key='BUTTON_ACCEPT')" 
					   click="onAccept()" height="18"/>
			
			<mx:Button id="cancelButton" label="@Resource(bundle='Common', key='BUTTON_CANCEL')"
					   click="onCancel()"  height="18" styleName="buttonGris"/>
		</mx:FormItem>
	</mx:Form>

</AbiCloudPopUp>
